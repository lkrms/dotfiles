#!/usr/bin/env bash

. "$df_root/bin/lib/bash-helpers.sh" || exit

type -P code >/dev/null || exit 0

if [[ -L ~/.local/bin/code ]]; then
    maybe rm -fv ~/.local/bin/code
fi

for version in "" 84 83 82 81 80 74; do
    if php=$(find_first "php$version-xdebug"); then
        link_file "$php" ~/.local/bin/"php$version-xdebug"
    fi
    #if [[ $df_platform == linux ]] && php=$(find_first "php$version-docker"); then
    #    link_file "$php" ~/.local/bin/"php$version"
    #fi
done

if [[ $df_platform == linux ]]; then
    file=/opt/vscodium-bin/resources/app/product.json
    if [[ -f $file ]]; then
        replace_json --sudo "$file" jq_safe '
.nameLong = "Visual Studio Code" |
.extensionsGallery = {
    "serviceUrl": "https://marketplace.visualstudio.com/_apis/public/gallery",
    "cacheUrl": "https://vscode.blob.core.windows.net/gallery/index",
    "itemUrl": "https://marketplace.visualstudio.com/items",
    "controlUrl": "",
    "recommendationsUrl": ""
}'
    fi
fi

if [[ $df_platform == macos ]]; then
    shopt -s nullglob
    versions=(/usr/local/opt/php@*)
    [[ /usr/local -ef /opt/homebrew ]] ||
        versions+=(/opt/homebrew/opt/php@*)
    for version in ${versions+"${versions[@]}"}; do
        [[ -x $version/bin/php ]] || continue
        ver=${version#*/php@}
        link_file "$version/bin/php" ~/".local/bin/php${ver//./}"
        inidir=${version%/*/*}/etc/php/$ver
        [[ -d $inidir ]] || continue
        ini=$inidir/php.ini
        [[ -f $ini ]] || continue
        inicli=$inidir/php-cli.ini
        if [[ ! -f $inicli ]]; then
            maybe cp -v "$ini" "$inicli"
        fi
        replace_file "$inicli" sed -E 's/^[[:blank:]]*;*[[:blank:]]*memory_limit[[:blank:]]*=.*/memory_limit = -1/'
        replace_file "$inicli" sed -E 's/^[[:blank:]]*;*[[:blank:]]*short_open_tag[[:blank:]]*=.*/short_open_tag = On/'
    done
elif source=$(type -P php); then
    target=$(php -ddisplay_errors=stderr -r "echo 'php' . \PHP_MAJOR_VERSION . \PHP_MINOR_VERSION . \PHP_EOL;")
    link_file "$source" ~/".local/bin/$target"
fi

extensions=$(mktemp)
install=$(mktemp)
installed=$(mktemp)
with_each extensions.txt \
    cat '{}' | sed -E 's/[[:blank:]]*(#.*)?//g; /^$/d' | to_lower | sort -u |
    tee "$extensions" >"$install"

while true; do
    code --list-extensions | to_lower | sort -u >"$installed"
    extension=$(comm -23 "$install" "$installed" | head -n1)
    [[ -n ${extension:+1} ]] || break
    maybe code --install-extension "$extension"
    grep -Fxv "$extension" "$install" >"$installed" || true
    cp "$installed" "$install"
done

IFS=$'\n'
unknown=($(comm -13 "$extensions" "$installed"))
if [[ -n ${unknown+1} ]]; then
    echo "${#unknown[@]} unknown extension(s):"
    printf '%s\n' "${unknown[@]}"
fi
